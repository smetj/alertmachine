#!/usr/bin/perl -w

use strict;
use warnings;
use Gearman::Client;
use Getopt::Long;
use Monitoring::Livestatus;
use JSON;
use UUID::Tiny ':std';

my $livestatus      = "/var/lib/livestatus/livestatus.sock";
my $queue           = "alert_event";
my $json            = "{}";
my $host_name       = "";
my $service_name    = "";
my $destination     = "gearmand://localhost:4730";
my $result;

sub HelpMessage{
    print <<HELP;
A script which creates JSON formatted events out of Nagios/Naemon alerts which
then can be further processed by an external process.

A Livestatus query is done for the host/service to collect all available data
of the host/service.  To each event a UUID4 value (field uuid) is added as
well as the alert type (field alert_type) to differentiate between a host or
service alert.

Usage: submit_alert_event.pl --host_name hostname [--service_name servicename]
[--livestatus path|host:port] [--destination data] [--queue name] [--json
data]

    --host_name     The Nagios/Naemon hostname to query.

Options:

    --service_name  The Nagios/Naemon servicename to query.

    --livestatus    The livestatus socket to connect to.
                    When value contains : it is concidered a network location.
                    Default: "/var/lib/livestatus/livestatus.sock"

    --destination   The destination to submit the alert event.  Can be either
                    Gearmand or a UDP socket.
                    Default: gearmand://localhost:4730

    --queue         The Gearman queue to submit the alert event to if
                    --destination points to Gearmand.
                    Default: "alert_event"

    --json          A JSON document to merge with the Livestatus response.

HELP
}

GetOptions (
                "livestatus=s"      => \$livestatus,
                "queue=s"           => \$queue,
                "json=s"            => \$json,
                "host_name=s"       => \$host_name,
                "service_name=s"    => \$service_name,
                "destination=s"     => \$destination,
                "help"              => sub { HelpMessage();exit 0 }
);

sub QueryLivestatus{
    my $ls_result;
    my $alert_type = "";

    my $ml = Monitoring::Livestatus->new(
        peer => $livestatus,
        warnings => ""
    );
    if ( $service_name ne "" and $host_name ne "" ){
        $ls_result = $ml->selectrow_hashref("GET services\nColumns:\nFilter: host_name = $host_name\nFilter: service_description = $service_name");
        $ls_result->{"alert_type"} = "service";
    } elsif ( $host_name ne "" ){
        $ls_result = $ml->selectrow_hashref("GET hosts\nColumns:\nFilter: host_name = $host_name");
        $ls_result->{"alert_type"} = "host";
    } else {
        print "You need to provide at least a host_name to query.\n\n";
        &HelpMessage();
        exit 1;
    }
    return $ls_result;
}


# Query Livestatus for host/service object properties
#####################################################
my $livestatus_reply = &QueryLivestatus();

# Merge $livestatus_reply with JSON provided through --json
###########################################################
my $cli_json = from_json($json);
$result = { %$livestatus_reply, %$cli_json };

# Add a UUID4 to the event
##########################
$result-> { "uuid" } = uuid_to_string(create_uuid(UUID_V4));

# Convert to string
###################
$result = to_json($result);

# Submit to destination
#######################

if ( $destination =~ /^gearmand:\/\/(.*)/ ){
    if ( $queue eq "" ){
        print "When sending results to Gearmand you need to set the queue name.\n\n";
        &HelpMessage;
        exit 1;
    }
    my $client = Gearman::Client->new;
    $client->job_servers($1);
    my $c = $client->dispatch_background($queue,$result);
    if ($c eq "0"){
        print "Failed to submit alert event to Gearman.\n";
        exit 1;
    }
}
elsif ( $destination =~ /^udp:\/\/(.*)/ ){
    use IO::Socket;
    my ($host, $port) = split(/:/,$1);
    my $sock = IO::Socket::INET->new(
        Proto    => 'udp',
        PeerPort => $port,
        PeerAddr => $host,
    ) or die "Could not create socket: $!\n";
    $sock->send($result."\n") or die "Send error: $!\n";
    # close($sock);
}
else {
    print "--destination value not correct.\n\n";
    &HelpMessage;
    exit 1;
}

